name: Go CI

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-build:
    name: Test & Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          check-latest: true
          cache: true
          cache-dependency-path: |
            **/go.sum

      - name: Verify go.mod is tidy
        shell: bash
        run: |
          set -euo pipefail
          go mod tidy
          # Проверяем изменения в go.mod
          git diff --exit-code -- go.mod || {
            echo "go.mod не tidy. Запустите 'go mod tidy' локально и закоммитьте изменения."
            git --no-pager diff -- go.mod
            exit 1
          }
          # Проверяем go.sum, только если файл существует
          if [ -f go.sum ]; then
            git diff --exit-code -- go.sum || {
              echo "go.sum не tidy. Запустите 'go mod tidy' локально и закоммитьте изменения."
              git --no-pager diff -- go.sum
              exit 1
            }
          fi

      - name: Go vet
        run: go vet ./...

      - name: Run tests
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            go test ./... -count=1
          else
            go test ./... -race -count=1
          fi

      - name: Build CLI
        shell: bash
        env:
          GITHUB_REF: ${{ github.ref }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          GITHUB_SHA: ${{ github.sha }}
        run: |
          set -e
          OS=$(go env GOOS)
          ARCH=$(go env GOARCH)
          EXT=""
          if [ "$OS" = "windows" ]; then EXT=".exe"; fi

          # Версия: тэг -> сам тэг, иначе короткий sha
          VERSION="$GITHUB_REF_NAME"
          if [[ "$GITHUB_REF" != refs/tags/* ]]; then
            VERSION="ci-${GITHUB_SHA::7}"
          fi

          mkdir -p dist
          go build -ldflags "-X main.version=${VERSION}" -o "dist/structgen_${OS}_${ARCH}${EXT}" ./cmd/structgen
          ls -la dist

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: structgen-${{ matrix.os }}
          path: dist/*
          if-no-files-found: error
          retention-days: 14

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: test-build
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: structgen-*
          merge-multiple: true
          path: dist

      - name: Generate checksums
        run: |
          cd dist
          sha256sum * > checksums.txt
          cat checksums.txt

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          files: |
            dist/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
